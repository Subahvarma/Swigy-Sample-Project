name: Node js Docker Image Deploy into ECR

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'  # Set your Node.js version here

      - name: Check if npm is available
        id: check_npm
        run: |
          if ! command -v npm &> /dev/null
          then
            echo "npm not found, skipping npm install, build, and test."
            echo "npm_found=false" >> $GITHUB_ENV
          else
            echo "npm found, proceeding with npm install, build, and test."
            echo "npm_found=true" >> $GITHUB_ENV
          fi

      # Uncomment the following block if you want to run npm install, build, and test
      # - name: Install dependencies, build, and test
      #   if: env.npm_found == 'true'
      #   run: |
      #     npm install
      #     npm run build --if-present
      #     npm run test --if-present

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      # SonarQube Scan Job
      - name: SonarQube Scan
        run: |
          sonar-scanner \
            -Dsonar.projectKey=Swigy-01 \
            -Dsonar.sources=. \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.projectName="Swigy-01" \
            -Dsonar.verbose=true \
            -Dsonar.log.level=DEBUG

      # SonarQube Quality Gate Check
      - name: Wait for SonarQube Quality Gate
        run: |
          sonar-quality-gate \
            --url "${{ secrets.SONAR_HOST_URL }}" \
            --token "${{ secrets.SONAR_TOKEN }}" \
            --project "Swigy-01"
        continue-on-error: false  # This will fail the workflow if the quality gate fails

      # Optional: SonarQube analysis for pull request
      # - name: SonarQube PR Analysis
      #   if: github.event_name == 'pull_request'
      #   run: |
      #     sonar-scanner \
      #       -Dsonar.projectKey=Swigy-01 \
      #       -Dsonar.sources=. \
      #       -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
      #       -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
      #       -Dsonar.projectName="Swigy-01" \
      #       -Dsonar.pullrequest.key=${{ github.event.pull_request.number }}

      - name: Create ECR repository (if not exists)
        run: |
          REPOSITORY_NAME=nodejs-docker-repo
          aws ecr describe-repositories --repository-names $REPOSITORY_NAME || aws ecr create-repository --repository-name $REPOSITORY_NAME

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-south-1.amazonaws.com

      - name: Build Docker image
        run: |
          docker build -t nodejsk1 .

      - name: Tag Docker image for ECR
        run: |
          docker tag nodejsk1:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-south-1.amazonaws.com/nodejs-docker-repo:latest

      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-south-1.amazonaws.com/nodejs-docker-repo:latest
